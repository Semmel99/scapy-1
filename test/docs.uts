% How to use Scapy's CAN layer

* RUN ``./test/run_tests_py3 -t test/docs.uts -k docs -R -q`` to get the docs

############
############

+ Basic operations
* This testset is for preparation of the campaign

= Load module
import random
random.seed()
from io import BytesIO

= Load CAN layer
~ docs
* This imports the CAN protocol into the current Scapy session

load_layer("can")

= Build a CAN packet
~ docs
* A simple CAN packet can be build like this. The length field is set
* during the build.

pkt = CAN(identifier=0x133, data=b"\xde\xad\xbe\xef")
bytes(pkt) == b"\x00\x00\x013\x04\x00\x00\x00\xde\xad\xbe\xef"


= Build a CAN packet with extended addressing
~ docs
* A CAN packet with extended addressing can be build like this.

pkt = CAN(flags="extended", identifier=0x133, data=b"\xde\xad\xbe\xef")
bytes(pkt) == b"\x80\x00\x01\x33\x04\x00\x00\x00\xde\xad\xbe\xef"
pkt.flags == "extended"

pkt = CAN(flags="extended", identifier=0x1234567, data=b"\xde\xad\xbe\xef")
bytes(pkt) == b"\x81\x23\x45\x67\x04\x00\x00\x00\xde\xad\xbe\xef"
pkt.flags == "extended"

+ Operations on candump files

= Interpreting candump output
~ docs
* candump is a very useful utility and part of the Linux can-utils packet

b'''  vcan0  1F334455   [8]  11 22 33 44 55 66 77 88
  vcan0       1F3   [8]  11 22 33 44 55 66 77 88
  vcan0       1F3   [8]  11 22 33 44 55 66 77 88
  vcan0  1F334455   [8]  11 22 33 44 55 66 77 88
  vcan0       1F3   [8]  11 22 33 44 55 66 77 88
  vcan0  1F334455   [8]  11 22 33 44 55 66 77 88
  vcan0  1F334455   [4]  11 22 33 44
  vcan0       1F3   [4]  11 22 33 44'''

candump_fd = BytesIO(_)
packets = rdcandump(candump_fd)
assert len(packets) == 8


