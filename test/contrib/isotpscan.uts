% Regression tests for ISOTPScan

+ Configuration
~ conf

= Imports
load_layer("can")
conf.contribs['CAN']['swap-bytes'] = False
import threading, six, subprocess
from subprocess import call
from scapy.contrib.isotp import send_multiple_ext, filter_periodic_packets, scan, scan_extended
from scapy.consts import LINUX
import sys
import os

= Definition of constants, utility functions

iface0 = "vcan0"
iface1 = "vcan1"

# function to exit when the can-isotp kernel module is not available
ISOTP_KERNEL_MODULE_AVAILABLE = False
def exit_if_no_isotp_module():
    if not ISOTP_KERNEL_MODULE_AVAILABLE:
        err = "TEST SKIPPED: can-isotp not available"
        subprocess.call("printf \"%s\r\n\" > /dev/stderr" % err, shell=True)
        warning("Can't test ISOTP native socket because kernel module is not loaded")
        exit(0)


= Initialize a virtual CAN interface
~ vcan_socket needs_root linux
if 0 != call("cansend %s 000#" % iface0, shell=True):
    # vcan0 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface0, shell=True):
        print("add %s failed: Maybe it was already up?" % iface0)
    if 0 != call("sudo ip link set dev %s up" % iface0, shell=True):
        raise Exception("could not bring up %s" % iface0)

if 0 != call("cansend %s 000#" % iface0, shell=True):
    raise Exception("cansend doesn't work")

if 0 != call("cansend %s 000#" % iface1, shell=True):
    # vcan1 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface1, shell=True):
        print("add %s failed: Maybe it was already up?" % iface1)
    if 0 != call("sudo ip link set dev %s up" % iface1, shell=True):
        raise Exception("could not bring up %s" % iface1)

if 0 != call("cansend %s 000#" % iface1, shell=True):
    raise Exception("cansend doesn't work")

print("CAN should work now")

= Import CANSocket

from scapy.contrib.cansocket_python_can import *

import can as python_can
new_can_socket = lambda iface: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface))
new_can_socket0 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface0), timeout=0.01)
new_can_socket1 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface1), timeout=0.01)

# utility function for draining a can interface, asserting that no packets are there
def drain_bus(iface=iface0, assert_empty=True):
    with new_can_socket0() as s:
        pkts = s.sniff(timeout=0.1)
        if assert_empty:
            assert len(pkts) == 0

print("CAN sockets should work now")

= Overwrite definition for vcan_socket systems native sockets
~ vcan_socket needs_root linux

if six.PY3 and LINUX:
    from scapy.contrib.cansocket_native import *
    new_can_socket = lambda iface: CANSocket(iface)
    new_can_socket0 = lambda: CANSocket(iface0)
    new_can_socket1 = lambda: CANSocket(iface1)


= Overwrite definition for vcan_socket systems python-can sockets
~ vcan_socket needs_root linux
if "python_can" in CANSocket.__module__:
    new_can_socket = lambda iface: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface, bitrate=250000), timeout=0.01)
    new_can_socket0 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface0, bitrate=250000), timeout=0.01)
    new_can_socket1 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface1, bitrate=250000), timeout=0.01)

= Verify that a CAN socket can be created and closed
s = new_can_socket(iface0)
s.close()


= Check if can-isotp and can-utils are installed on this system
~ linux
p = subprocess.Popen('lsmod | grep "^can_isotp"', stdout = subprocess.PIPE, shell=True)
if p.wait() == 0:
    if b"can_isotp" in p.stdout.read():
        p = subprocess.Popen("isotpsend -s1 -d0 %s" % iface0, stdin = subprocess.PIPE, shell=True)
        p.stdin.write(b"01")
        p.stdin.close()
        r = p.wait()
        if r == 0:
            ISOTP_KERNEL_MODULE_AVAILABLE = True


+ Syntax check

= Import isotp
conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': ISOTP_KERNEL_MODULE_AVAILABLE}
load_contrib("isotp")

if ISOTP_KERNEL_MODULE_AVAILABLE:
    from scapy.contrib.isotp import ISOTPNativeSocket
    ISOTPSocket = ISOTPNativeSocket
    assert ISOTPSocket == ISOTPNativeSocket
else:
    from scapy.contrib.isotp import ISOTPSoftSocket
    ISOTPSocket = ISOTPSoftSocket
    assert ISOTPSocket == ISOTPSoftSocket

= Import Testfile

root = os.path.dirname(os.path.abspath(__file__))
print(root)

if six.PY2:
    import imp
    isotpscan_tests = imp.load_source('isotpscan', root + '/../test/contrib/isotpscan.py')
else:
    from importlib.machinery import SourceFileLoader
    isotpscan_tests = SourceFileLoader('isotpscan', root + '/../test/contrib/isotpscan.py').load_module()

= Test send_multiple_ext()

pkt = ISOTPHeaderEA(identifier=0x100, extended_address=1)/ISOTP_FF(message_size=100, data=b'\x00\x00\x00\x00\x00')
number_of_packets = 100

def sender():
    with new_can_socket0() as sock1:
        send_multiple_ext(sock1, 0, pkt, number_of_packets)

thread = threading.Thread(target=sender)

with new_can_socket0() as sock:
    pkts = sock.sniff(timeout=4, count=number_of_packets, started_callback=thread.start)

thread.join(timeout=10)
assert len(pkts) == number_of_packets

= Test filter_periodic_packets() with periodic packets
pkt = CAN(identifier=0x200, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
received_packets = dict()
for i in range(40):
    temp_pkt = pkt.copy()
    temp_pkt.time = i / 1000
    received_packets[i] = (temp_pkt, temp_pkt.identifier)

filter_periodic_packets(received_packets)
assert len(received_packets) == 0


= Test filter_periodic_packets() with periodic packets and one outlier
outlier = CAN(identifier=300, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
outlier.time = 50 / 1000

pkt = CAN(identifier=0x200, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
received_packets = dict()
for i in range(40):
    temp_pkt = pkt.copy()
    temp_pkt.time = i / 1000
    received_packets[i] = (temp_pkt, temp_pkt.identifier)

received_packets[40] = (outlier, outlier.identifier)

filter_periodic_packets(received_packets)
assert len(received_packets) == 1


= Test filter_periodic_packets() with nonperiodic packets
pkt = CAN(identifier=0x200, length=8, data=b'\x01\x02\x03\x04\x05\x06\x07\x08')
received_packets = dict()
for i in range(40):
    temp_pkt = pkt.copy()
    temp_pkt.time = (i * i) / 1000
    received_packets[i] = (temp_pkt, temp_pkt.identifier)

filter_periodic_packets(received_packets)
assert len(received_packets) == 40

= Define helper function for dynamic sniff time tests

def test_dynamic(f):
    for t in [1, 3, 10]:
        try:
            drain_bus(iface0)
            err = "Starting test with sniff_time multiplicator %d" % t
            subprocess.call("printf \"%s\r\n\" > /dev/stderr" % err, shell=True)
            f(0.02 * t)
            return True
        except AssertionError as e:
            if t < 10:
                err = "Test failed. Automatically increase sniff time and retry."
                subprocess.call("printf \"%s\r\n\" > /dev/stderr" % err, shell=True)
            else:
                raise e
    return False

= Test loading of isotpscan_tests

assert "Loaded" == isotpscan_tests.check_loading()

= Test scan()

test_dynamic(isotpscan_tests.test_scan)

= Test scan_extended()

test_dynamic(isotpscan_tests.test_scan_extended)

= Test ISOTPScan(output_format=text)

test_dynamic(isotpscan_tests.test_isotpscan_text)

= Test ISOTPScan(output_format=text) extended_can_id

test_dynamic(isotpscan_tests.test_isotpscan_text_extended_can_id)

= Test ISOTPScan(output_format=code)

test_dynamic(isotpscan_tests.test_isotpscan_code)

= Test extended ISOTPScan(output_format=code)

test_dynamic(isotpscan_tests.test_extended_isotpscan_code)

= Test extended ISOTPScan(output_format=code) extended_can_id

test_dynamic(isotpscan_tests.test_extended_isotpscan_code_extended_can_id)

= Test ISOTPScan(output_format=None)

test_dynamic(isotpscan_tests.test_isotpscan_none)

= Test ISOTPScan(output_format=None) 2

test_dynamic(isotpscan_tests.test_isotpscan_none_2)

= Test extended ISOTPScan(output_format=None)

test_dynamic(isotpscan_tests.test_extended_isotpscan_none)

= Test ISOTPScan(output_format=None) random IDs

test_dynamic(isotpscan_tests.test_isotpscan_none_random_ids)

= Test ISOTPScan(output_format=None) random IDs padding

test_dynamic(isotpscan_tests.test_isotpscan_none_random_ids_padding)

= Delete vcan interfaces
~ vcan_socket needs_root linux

if 0 != call("sudo ip link delete %s" % iface0, shell=True):
        raise Exception("%s could not be deleted" % iface0)

if 0 != call("sudo ip link delete %s" % iface1, shell=True):
        raise Exception("%s could not be deleted" % iface1)
